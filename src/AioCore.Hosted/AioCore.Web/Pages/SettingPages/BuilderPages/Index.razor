@page "/static/settings/builder/{tenantId:guid}"
@using AioCore.Domain.SettingAggregate
@using AioCore.Read.SettingQueries.CodeQueries
@using AioCore.Shared.Common.Constants
@using AioCore.Shared.Extensions
@using AioCore.Web.Pages.SettingPages.BuilderPages.ViewModels
@using MediatR
@using Microsoft.AspNetCore.Components
@layout EditorLayout

<div>
    <div class="hidden md:flex md:w-64 md:flex-col md:fixed md:inset-y-0 bg-white border-r">
        <div class="flex flex-col flex-grow pt-5 bg-white overflow-y-auto">
            <div class="flex font-bold">
                <NavLink href="@SystemFeatures.Tenants" class="flex items-center flex-shrink-0 px-4">
                    <i class="fa-duotone fa-caret-left"></i>
                </NavLink>
                <h1 class="flex my-auto">Giao diện</h1>
            </div>
            <div class="mt-5 flex-1 flex flex-col">
                <h1 class="flex font-bold justify-center px-2.5">
                    Mã nguồn
                    <div class="button-group flex ml-auto">
                        <Button @onclick="@Open" Size="@AntSizeLDSType.Small" Disabled="@(_selectedKey is null)" class="mx-0.5 flex justify-center items-center text-sm font-medium">
                            <i class="fa-duotone fa-pen-to-square"></i>
                        </Button>
                        <Button @onclick="@Open" Size="@AntSizeLDSType.Small" class="mx-0.5 flex justify-center items-center text-sm font-medium">
                            <i class="fa-solid fa-plus"></i>
                        </Button>
                    </div>
                </h1>
                @if (Codes is not null && Codes.Count > 0)
                {
                    <Tree @ref="_tree" DefaultExpandAll BlockNode
                          ShowLine ShowIcon DataSource="@Codes" Class="border m-2.5 shadow-sm rounded-md"
                          TitleExpression="x => x.DataItem.Name"
                          ChildrenExpression="x => x.DataItem.Child"
                          IsLeafExpression="x => x.DataItem.Child?.Count == 0"
                          KeyExpression="x => x.DataItem.Id.ToString()"
                          TItem="SettingCode" OnClick="@OnSelectNode">
                    </Tree>
                }
                else
                {
                    <Empty Class="my-4" Description="false"/>
                }
                <div class="space-grow grow"></div>
                <div class="">
                    <div class="px-2 pb-2 space-y-1">
                        <Popover Class="w-full" Placement="Placement.Right" ContentTemplate="@ContentColor" Title="@("Thiết lập màu sắc")" Trigger="@(new[] { Trigger.Click })">
                            <Button class="text-black group flex items-center px-2 py-2 text-sm font-medium rounded-md w-full">
                                <i class="fa-duotone fa-swatchbook mr-2"></i>
                                Màu sắc
                            </Button>
                        </Popover>
                    </div>
                    <div class="px-2 pb-2 space-y-1">
                        <Popover Class="w-full" Placement="Placement.RightBottom" ContentTemplate="@ContentOverview" Title="@("Thiết lập tổng quan")" Trigger="@(new[] { Trigger.Click })">
                            <Button class="text-black group flex items-center px-2 py-2 text-sm font-medium rounded-md w-full">
                                <i class="fa-duotone fa-swatchbook mr-2"></i>
                                Thiết lập tổng quan
                            </Button>
                        </Popover>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="md:pl-64 flex flex-col flex-1">
        <div class="flex sticky top-0 z-10 flex-shrink-0 flex h-16 bg-white border-b">
            <div class="flex my-auto mx-4 font-bold">
                Xem trước
            </div>
            <div class="flex grow m-auto justify-center">
                <div class="device">
                    <i class="fa-regular mx-2 fa-desktop text-xl cursor-pointer"></i>
                    <i class="fa-regular fa-tablet-screen text-xl cursor-pointer"></i>
                    <i class="fa-regular mx-2 fa-mobile-notch text-xl cursor-pointer"></i>
                </div>
            </div>
            <div class="flex w-14 my-auto mx-4">
                <Button class="flex ml-auto text-gray-700 bg-white hover:bg-gray-50 hover:text-black">
                    Lưu
                </Button>
            </div>
        </div>
        <main style="height: calc(100vh - 4rem)">
            <div class="py-6">
                <iframe class="h-full w-full" src="@("/preview")"></iframe>
            </div>
        </main>
    </div>
</div>

<CodeDetail @ref="@CodeDetail" @bind-Visible="@_toggleDetail" @bind-VisibleNode="@_selectedKey" Title="@Title" TenantId="@TenantId" Submitted="() => FetchAsync()"/>

@code{

    private RenderFragment ContentColor =>
        @<a>Close</a>;

    private RenderFragment ContentOverview =>
        @<a>Close</a>;

    private bool _toggleDetail;
        private const string Title = "Thông tin tệp";
    private Tree<SettingCode> _tree = default!;
    private Guid? _selectedKey;
    private SettingCode? SelectedFile { get; set; }
    private TreeNode<SettingCode>? SelectedNode { get; set; }
    private List<SettingCode>? Codes { get; set; }
    private Form<CodeDetailModel> _form = new();
    private CodeDetailModel _model = new();
    private CodeDetail CodeDetail { get; set; } = new();

    [Parameter]
    public Guid TenantId { get; set; }

    [Inject]
    private IMediator Mediator { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await FetchAsync(1);
        await base.OnInitializedAsync();
    }

    private async Task FetchAsync(int page = 1, int pageSize = 8)
    {
        var response = await Mediator.Send(new ListCodeQuery(TenantId, page, pageSize));
        Codes = response.Data;
    }

    private async void Open()
    {
        if (_selectedKey is not null)
            await CodeDetail.FetchAsync(_selectedKey);
        _toggleDetail = true;
        StateHasChanged();
    }

    private void OnSelectNode(TreeEventArgs<SettingCode> obj)
    {
        if (_selectedKey.Equals(obj.Node.Key.ToGuid()))
            _selectedKey = null;
        else _selectedKey = obj.Node.Key.ToGuid();
    }

}