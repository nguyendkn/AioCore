@page "/settings/tenant/list"
@using MediatR
@using AioCore.Read.SettingQueries.TenantQueries
@using AioCore.Domain.SettingAggregate
@using AioCore.Shared.Common.Constants
@layout SettingsLayout

<HeaderComponent Title="Thuê bao" Icon="server">
    <Description>
        <p class="text-sm text-gray-500">Cấu hình thuê bao được đăng ký vào hệ thống</p>
        <p class="text-sm text-gray-500">Các thuê bao sẽ có định danh riêng</p>
    </Description>
    <Action>
        <Button @onclick="@Open" class="flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
            Thêm mới
        </Button>
    </Action>
</HeaderComponent>
<Content>
    <div class="w-[1024px] mx-auto my-10 bg-white main mb-2">
        <div class="bg-white shadow overflow-hidden sm:rounded-md">
            <ul role="list" class="divide-y divide-gray-200">
                @if (Tenants is {Count: > 0 })
                {
                    foreach (var item in Tenants)
                    {
                        <li>
                            <a href="#" class="block hover:bg-gray-50">
                                <div class="flex items-center px-4 py-4 sm:px-6">
                                    <div class="min-w-0 flex-1 flex items-center">
                                        <div class="flex-shrink-0">
                                            <img class="h-10 w-10" src="@($"/avatar/100/{item.Id}")" alt="avatar">
                                        </div>
                                        <div class="min-w-0 flex-1 px-4 md:grid md:grid-cols-2 md:gap-4">
                                            <div>
                                                <p class="text-sm font-medium text-indigo-600 truncate">@item.Title</p>
                                                <p class="mt-2 flex items-center text-sm text-gray-500">
                                                    <i class="fa-duotone fa-link mr-1"></i>
                                                    <span class="truncate">@item.Domain</span>
                                                </p>
                                            </div>
                                            <div class="hidden md:block">
                                                <div>
                                                    <p class="text-sm text-gray-900">
                                                        Ngày tạo
                                                        <time datetime="@item.CreatedAt.ToString("dd/MM/yyyy")">
                                                            @item.CreatedAt.ToString("dd/MM/yyyy")
                                                        </time>
                                                    </p>
                                                    <p class="mt-2 flex items-center text-sm text-gray-500">
                                                        @item.Group.Name
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div>
                                        <Dropdown Placement="@Placement.BottomLeft">
                                            <Overlay>
                                                @_overlayMenu(item.Id)
                                            </Overlay>
                                            <ChildContent>
                                                <Button Size="@AntSizeLDSType.Small">...</Button>
                                            </ChildContent>
                                        </Dropdown>
                                    </div>
                                </div>
                            </a>
                        </li>
                    }
                }
                else
                {
                    <Empty Description="false"/>
                }
            </ul>
        </div>
    </div>
    <div class="flex w-[1024px] mx-auto">
        <Button @onclick="Previous" class="ml-auto text-gray-700 bg-white hover:bg-gray-50 hover:text-black w-16 block text-center mr-0.5">
            <i class="fa-duotone fa-caret-left"></i>
        </Button>
        <Button @onclick="Next" class="text-gray-700 bg-white hover:bg-gray-50 hover:text-black w-16 block text-center ml-0.5">
            <i class="fa-duotone fa-caret-right"></i>
        </Button>
    </div>
</Content>

<TenantDetail @bind-Visible="@_toggleDetail" Title="@Title" Submitted="() => FetchAsync()"/>

@code {

    private RenderFragment _overlayMenu(Guid tenantId) =>
        @<Menu>
            <MenuItem>
                <NavLink href="@(string.Format(SettingFeatures.Builder, tenantId))" class="text-green-600 text-xs">
                    <i class="fa-duotone fa-table-layout"></i>
                    Giao diện
                </NavLink>
            </MenuItem>
            <MenuItem>
                <NavLink href="#" class="text-blue-600 text-xs">
                    <i class="fa-duotone fa-pen-to-square"></i>
                    Chỉnh sửa
                </NavLink>
            </MenuItem>
            <MenuItem>
                <NavLink href="#" class="text-red-600 text-xs">
                    <i class="fa-duotone fa-trash-can mr-1"></i>
                    Xóa
                </NavLink>
            </MenuItem>
        </Menu>;

    private bool _toggleDetail;
        private const string Title = "Thông tin thuê bao";
    private List<SettingTenant>? Tenants { get; set; }
    private static int _page = 1;

    [Inject]
    public IMediator Mediator { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await FetchAsync(_page);
        await base.OnInitializedAsync();
    }

    private void Open()
    {
        _toggleDetail = true;
    }

    private async Task FetchAsync(int page = 1, int pageSize = 8)
    {
        var response = await Mediator.Send(new ListTenantQuery(page, pageSize));
        Tenants = response.Data;
    }

    private async Task Next()
    {
        _page++;
        await FetchAsync(_page);
    }

    private async Task Previous()
    {
        _page = _page == 1 ? 1 : _page - 1;
        await FetchAsync(_page);
    }
}