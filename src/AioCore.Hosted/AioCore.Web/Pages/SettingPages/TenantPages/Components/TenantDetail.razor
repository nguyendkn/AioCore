@using AioCore.Web.Pages.SettingPages.TenantPages.ViewModels
@using MediatR
@using AioCore.Shared.Extensions
@using AioCore.Web.Services
@using AioCore.Write.SettingCommands.TenantCommands
@using AioCore.Shared.Common.Constants
@using AioCore.Domain.SettingAggregate
@using AioCore.Read.SettingQueries.TenantQueries
<Drawer Width="300" Closable="true" Visible="@Visible" Placement="right" Title="@Title" OnClose="Close">
    <Form @ref="@_form" Model="@_model" Layout="@FormLayout.Vertical">
        <FormItem>
            <Input @bind-Value="@context.Name"/>
        </FormItem>
        <FormItem>
            <Input @bind-Value="@context.Domain"/>
        </FormItem>
        <FormItem>
            <Input @bind-Value="@context.Title"/>
        </FormItem>
        <FormItem>
            <Input @bind-Value="@context.Keyword"/>
        </FormItem>
        <FormItem Label="Chọn nhóm thuê bao">
            <Select TItem="SettingTenantGroup"
                    TItemValue="Guid"
                    DataSource="@TenantGroups"
                    @bind-Value="@context.Id"
                    ValueName="@nameof(SettingTenantGroup.Id)"
                    LabelName="@nameof(SettingTenantGroup.Name)"
                    Placeholder="Chọn nhóm" Loading="@_loadingTenantGroups"
                    OnSelectedItemChanged="OnSelectTenantGroup"
                    DropdownRender="@DropdownRender">
            </Select>
        </FormItem>
        <Button class="flex ml-auto text-gray-700 bg-white hover:bg-gray-50 hover:text-black" @onclick="OnSubmit">
            Lưu
        </Button>
    </Form>
</Drawer>

@code{

    private RenderFragment DropdownRender(RenderFragment originNode)
    {
        return @<Template>
                   <div>
                       @originNode
                       <Divider Style="margin: 4px 0"></Divider>
                       <div style="display: flex; flex-wrap: nowrap; padding: 8px">
                           <Input placeholder="'Enter' để thêm mới nhóm" @bind-Value="@_tenantGroupName" OnPressEnter="@OnCreateTenantGroup"/>
                       </div>
                   </div>
               </Template>;
    }


    private bool _visible;
    private bool _loadingTenantGroups;
    private string? _tenantGroupName;
    private Form<TenantDetailModel> _form = new();
    private TenantDetailModel _model = new();
    private List<SettingTenantGroup>? TenantGroups { get; set; }
    private SettingTenantGroup? SelectedTenantGroup { get; set; }

    [Parameter]
    public bool Visible
    {
        get => _visible;
        set
        {
            if (_visible == value) return;
            _visible = value;
            VisibleChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public EventCallback<bool> Submitted { get; set; }

    [Parameter]
    public string Title { get; set; } = default!;

    [Inject]
    public IMediator Mediator { get; set; } = default!;

    [Inject]
    public IAlertService Alert { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await FetchTenantGroupsAsync();
        await base.OnInitializedAsync();
    }

    void Close()
    {
        Visible = false;
    }

    private async Task FetchTenantGroupsAsync(int page = 1, int pageSize = 100)
    {
        var response = await Mediator.Send(new ListTenantGroupQuery(page, pageSize));
        TenantGroups = response.Data;
        _loadingTenantGroups = false;
    }

    private async Task OnSubmit()
    {
        var validated = _form.Validate();
        if (validated)
        {
            Visible = false;
            var response = await Mediator.Send(_model.To<SubmitTenantCommand>());
            await Submitted.InvokeAsync(response.Success);
            if (response.Success) await Alert.Success(response.Message);
            else await Alert.Error(response.Message);
            _model = new TenantDetailModel();
        }
        else
        {
            await Alert.Error(Messages.ValidateFormFailed);
        }
    }

    private async void OnSelectTenantGroup(SettingTenantGroup tenantGroup)
    {
        _loadingTenantGroups = true;
        _model.GroupId = tenantGroup.Id;
        SelectedTenantGroup = tenantGroup;
        await FetchTenantGroupsAsync();
    }

    private async void OnCreateTenantGroup()
    {
        if (string.IsNullOrEmpty(_tenantGroupName)) return;
        var response = await Mediator.Send(new SubmitTenantGroupCommand(_tenantGroupName));
        if (!response.Success) return;
        await FetchTenantGroupsAsync();
        _tenantGroupName = string.Empty;
        StateHasChanged();
        await Alert.Success(response.Message);
    }

}